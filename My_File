@Test
void testGetProductListFromCache_WhenRuntimeException_ShouldThrowCircuitBreakerException() throws JsonProcessingException {
    // Arrange - enable caching
    ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", true);
    ReflectionTestUtils.setField(serviceHelper, "cacheHost", "http://mock-cache-host");
    ReflectionTestUtils.setField(serviceHelper, "environment", "dev");

    // Mock circuit breaker to directly execute supplier
    Mockito.when(getCircuitBreaker.executeSupplier(Mockito.any()))
           .thenAnswer(invocation -> {
               return ((java.util.function.Supplier<?>) invocation.getArgument(0)).get();
           });

    // Mock restTemplate to throw runtime exception
    Mockito.when(restTemplate.getForObject(Mockito.anyString(), Mockito.eq(String.class)))
           .thenThrow(new RuntimeException("Simulated REST failure"));

    // Act & Assert
    CircuitBreakerException thrown = assertThrows(
            CircuitBreakerException.class,
            () -> serviceHelper.getProductListFromCache(productListCacheModel),
            "Expected CircuitBreakerException to be thrown when RestTemplate fails"
    );

    // Validate exception message and cause
    assertEquals("Main execution failed", thrown.getMessage());
    assertEquals("Simulated REST failure", thrown.getCause().getMessage());
}
