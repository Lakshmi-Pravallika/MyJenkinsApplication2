package com.skechers.loyalty.reflecktions.service;

import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagement;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.skechers.loyalty.reflecktions.exception.CircuitBreakerException;
import com.skechers.loyalty.reflecktions.model.ProductListCacheModel;
import com.skechers.loyalty.reflecktions.utils.ParameterUtil;
import com.skechers.loyalty.reflecktions.utils.ReflecktionsUtils;
import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class LoyaltyReflecktionsServiceHelperTest {

    @Mock
    CircuitBreaker getCircuitBreaker;

    @Mock
    CircuitBreaker postCircuitBreaker;

    @Mock
    AWSSimpleSystemsManagement ssmClient;

    @Mock
    ParameterUtil parameterUtil;

    @Mock
    RestTemplate restTemplate;

    LoyaltyReflecktionsServiceHelper serviceHelper;

    ProductListCacheModel cacheModel;

    @BeforeEach
    void setUp() {
        // Create service using the actual constructor
        serviceHelper = new LoyaltyReflecktionsServiceHelper(
                getCircuitBreaker,
                postCircuitBreaker,
                ssmClient,
                parameterUtil,
                restTemplate
        );

        // Set private fields using ReflectionTestUtils
        ReflectionTestUtils.setField(serviceHelper, "cacheHost", "http://mock-cache-host");
        ReflectionTestUtils.setField(serviceHelper, "environment", "dev");

        cacheModel = new ProductListCacheModel();
        cacheModel.setCategory("shoes");
        cacheModel.setLocale(Optional.of("en-US"));
        cacheModel.setPage(Optional.of("1"));
        cacheModel.setLimit(Optional.of("20"));
        cacheModel.setSort(Optional.of("price"));
        cacheModel.setFilter(Optional.of("color=red"));
        cacheModel.setSearchType(Optional.of("type1"));
        cacheModel.setStore_id(Optional.of("store123"));
    }

    /**
     * Covers the GET path where restTemplate.exchange throws Exception
     * -> triggers CircuitBreakerException inside supplier
     */
    @Test
    void testGetProductListFromCache_ThrowsCircuitBreakerException() {
        // Enable cache
        ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", true);

        // Mock restTemplate to throw exception
        when(restTemplate.exchange(any(), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
                .thenThrow(new RuntimeException("Simulated GET failure"));

        when(parameterUtil.getEnvironmentParameter("cache_api_key")).thenReturn("mock-api-key");

        // Make CircuitBreaker decorator return our supplier directly
        when(getCircuitBreaker.decorateCheckedSupplier(any())).thenAnswer(invocation -> invocation.getArgument(0));

        assertThrows(CircuitBreakerException.class, () -> {
            serviceHelper.getProductListFromCache(cacheModel);
        });

        verify(restTemplate, times(1))
                .exchange(any(), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class));
    }

    /**
     * Covers POST where restTemplate.exchange throws Exception
     * -> triggers CircuitBreakerException
     */
    @Test
    void testPostProductListToCache_ThrowsCircuitBreakerException() throws JsonProcessingException {
        // Enable cache
        ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", true);

        when(restTemplate.exchange(any(), eq(HttpMethod.POST), any(HttpEntity.class), eq(Boolean.class)))
                .thenThrow(new RuntimeException("Simulated POST failure"));

        when(parameterUtil.getEnvironmentParameter("cache_api_key")).thenReturn("mock-api-key");

        // Make CircuitBreaker decorator return our supplier directly
        when(postCircuitBreaker.decorateCheckedSupplier(any())).thenAnswer(invocation -> invocation.getArgument(0));

        CompletableFuture<Boolean> future = serviceHelper.postProductListToCache(cacheModel, "mock-payload");

        // Since exception occurs, fallback returns false
        Boolean result = future.join();
        assertFalse(result);

        verify(restTemplate, times(1))
                .exchange(any(), eq(HttpMethod.POST), any(HttpEntity.class), eq(Boolean.class));
    }

    /**
     * Covers resetCacheFlag where static method ReflecktionsUtils.getParameterValue is mocked
     */
    @Test
    void testResetCacheFlag() {
        try (MockedStatic<ReflecktionsUtils> mockedStatic = Mockito.mockStatic(ReflecktionsUtils.class)) {
            mockedStatic.when(() ->
                    ReflecktionsUtils.getParameterValue(eq(ssmClient),
                            eq("/config/loyalty_dev/is_cache_enabled")))
                    .thenReturn("true");

            serviceHelper.resetCacheFlag();

            // Verify that isCacheEnabled is updated
            boolean actualValue = (boolean) ReflectionTestUtils.getField(serviceHelper, "isCacheEnabled");
            assertTrue(actualValue);
        }
    }

    /**
     * Covers the scenario where isCacheEnabled is false,
     * so getProductListFromCache returns false without calling RestTemplate.
     */
    @Test
    void testGetProductListFromCache_WhenCacheDisabled() throws JsonProcessingException {
        ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", false);

        Object result = serviceHelper.getProductListFromCache(cacheModel);

        assertFalse((Boolean) result);
        verifyNoInteractions(restTemplate);
    }

    /**
     * Covers the scenario where isCacheEnabled is false,
     * so postProductListToCache doesn't call RestTemplate and immediately returns false.
     */
    @Test
    void testPostProductListToCache_WhenCacheDisabled() throws JsonProcessingException {
        ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", false);

        CompletableFuture<Boolean> future = serviceHelper.postProductListToCache(cacheModel, "mock-payload");

        assertFalse(future.join());
        verifyNoInteractions(restTemplate);
    }
}
