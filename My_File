@Test
void testGetProductListFromCache_WhenRestTemplateFails_ShouldThrowCircuitBreakerException() {
    // Ensure prerequisites are met
    ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", true);
    ReflectionTestUtils.setField(serviceHelper, "cacheHost", "http://mock-cache-host");
    ReflectionTestUtils.setField(serviceHelper, "environment", "dev");

    // Mock circuit breaker to directly execute supplier
    Mockito.when(getCircuitBreaker.executeSupplier(Mockito.any()))
           .thenAnswer(invocation -> {
               @SuppressWarnings("unchecked")
               java.util.function.Supplier<Object> supplier =
                   (java.util.function.Supplier<Object>) invocation.getArgument(0);
               return supplier.get(); // Let the failure bubble up
           });

    // Mock restTemplate to throw a runtime exception
    Mockito.when(restTemplate.getForObject(Mockito.anyString(), Mockito.eq(String.class)))
           .thenThrow(new RuntimeException("Simulated REST failure"));

    // Act & Assert
    CircuitBreakerException exception = assertThrows(
            CircuitBreakerException.class,
            () -> serviceHelper.getProductListFromCache(productListCacheModel),
            "Expected CircuitBreakerException to be thrown when restTemplate fails"
    );

    // Verify exception details
    assertEquals("Main execution failed", exception.getMessage());
    assertEquals("Simulated REST failure", exception.getCause().getMessage());

    // Verify restTemplate was actually called
    Mockito.verify(restTemplate).getForObject(Mockito.anyString(), Mockito.eq(String.class));
}
