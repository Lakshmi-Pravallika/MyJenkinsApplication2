@Test
void testGetProductListFromCache_WhenRuntimeException_ShouldThrowCircuitBreakerException() throws JsonProcessingException {
    // Enable caching
    ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", true);
    ReflectionTestUtils.setField(serviceHelper, "cacheHost", "http://mock-cache-host");
    ReflectionTestUtils.setField(serviceHelper, "environment", "dev");

    // Mock CircuitBreaker metrics
    Mockito.when(getCircuitBreaker.getMetrics()).thenReturn(circuitBreakerMetrics);
    Mockito.when(circuitBreakerMetrics.getFailureRate()).thenReturn(0.0f);
    Mockito.when(circuitBreakerMetrics.getNumberOfBufferedCalls()).thenReturn(10);
    Mockito.when(circuitBreakerMetrics.getNumberOfFailedCalls()).thenReturn(2);
    Mockito.when(circuitBreakerMetrics.getNumberOfSlowCalls()).thenReturn(1);
    Mockito.when(circuitBreakerMetrics.getNumberOfSuccessfulCalls()).thenReturn(7);

    // Mock restTemplate to simulate a runtime failure
    Mockito.when(restTemplate.getForObject(Mockito.anyString(), Mockito.eq(String.class)))
            .thenThrow(new RuntimeException("Simulated REST failure"));

    // Act & Assert
    CircuitBreakerException thrown = assertThrows(
            CircuitBreakerException.class,
            () -> serviceHelper.getProductListFromCache(productListCacheModel),
            "Expected CircuitBreakerException to be thrown when RestTemplate fails"
    );

    assertEquals("Main execution failed", thrown.getMessage());
    assertEquals("Simulated REST failure", thrown.getCause().getMessage());
}
