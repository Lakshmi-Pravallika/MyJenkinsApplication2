import com.fasterxml.jackson.databind.ObjectMapper;
import com.skechers.loyalty.reflecktions.data.response.*;
import com.skechers.loyalty.reflecktions.model.ProductListCacheModel;
import com.skechers.loyalty.reflecktions.service.LoyaltyReflecktionsServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class LoyaltyReflecktionsServiceImplTest {

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private LoyaltyReflecktionsServiceImpl service;

    private ProductListCacheModel productListCacheModel;
    private Map<String, String> filterMap;
    private SearchCategoryResponseData responseData;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        productListCacheModel = ProductListCacheModel.builder().build();
        filterMap = new HashMap<>();

        // Setup mock SearchCategoryResponseData
        responseData = new SearchCategoryResponseData();
        responseData.setTotalItem(2);

        // Mock Product
        ProductData productData = new ProductData();
        ValueItem valueItem1 = new ValueItem();
        valueItem1.setId("prod1");

        ValueItem valueItem2 = new ValueItem();
        valueItem2.setId("prod2");

        productData.setValue(Arrays.asList(valueItem1, valueItem2));

        ContentData contentData = new ContentData();
        contentData.setProduct(productData);
        responseData.setContent(contentData);

        // Mock Facet
        CategoryProductFacetData facetData = new CategoryProductFacetData();
        CategoryProductFacetValue facetValue = new CategoryProductFacetValue();
        facetValue.setLabel("Red");
        facetValue.setValue("red");
        facetData.setValue(Collections.singletonList(facetValue));

        Map<String, CategoryProductFacetData> facetMap = new HashMap<>();
        facetMap.put("colors", facetData);
        facetMap.put("sizes", new CategoryProductFacetData());

        responseData.setFacet(facetMap);
    }

    @Test
    void testProcessSearchForRefk_Success() throws IOException {
        // Arrange
        String expectedJson = "{\"result\":\"success\"}";
        when(objectMapper.writeValueAsString(any(SearchCategoryResponseData.class))).thenReturn(expectedJson);

        // Act
        String actualResponse = service.processSearchForRefk(filterMap, productListCacheModel, responseData, null);

        // Assert
        assertNotNull(actualResponse, "Response should not be null");
        assertEquals(expectedJson, actualResponse, "The JSON response should match the expected output");

        // Verify that ObjectMapper was called once
        verify(objectMapper, times(1)).writeValueAsString(any(SearchCategoryResponseData.class));
    }

    @Test
    void testProcessSearchForRefk_EmptyResults() throws IOException {
        // Arrange
        responseData.setTotalItem(0);
        String expectedJson = "{\"result\":\"empty\"}";
        when(objectMapper.writeValueAsString(any(SearchCategoryResponseData.class))).thenReturn(expectedJson);

        // Act
        String actualResponse = service.processSearchForRefk(filterMap, productListCacheModel, responseData, null);

        // Assert
        assertNotNull(actualResponse);
        assertEquals(expectedJson, actualResponse);
        assertEquals(0, responseData.getTotalPage(), "Total page should be set to 0 when no items are present");

        verify(objectMapper, times(1)).writeValueAsString(any(SearchCategoryResponseData.class));
    }

    @Test
    void testProcessSearchForRefk_ThrowsIOException() throws IOException {
        // Arrange
        when(objectMapper.writeValueAsString(any(SearchCategoryResponseData.class))).thenThrow(new IOException("JSON error"));

        // Act
        String actualResponse = service.processSearchForRefk(filterMap, productListCacheModel, responseData, null);

        // Assert
        assertNull(actualResponse, "Response should be null when an exception occurs");
    }
}
