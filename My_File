@Test
void testGetProductListFromCache_WhenRestTemplateFails_ShouldThrowCircuitBreakerException() {
    // Precondition: required fields set
    ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", true);
    ReflectionTestUtils.setField(serviceHelper, "cacheHost", "http://mock-cache-host");

    // 1. Mock Circuit Breaker to directly run supplier
    Mockito.when(getCircuitBreaker.executeSupplier(Mockito.any()))
           .thenAnswer(invocation -> {
               System.out.println("executeSupplier invoked!");
               @SuppressWarnings("unchecked")
               java.util.function.Supplier<Object> supplier =
                       (java.util.function.Supplier<Object>) invocation.getArgument(0);
               return supplier.get(); // run directly so any exception propagates
           });

    // 2. Make restTemplate throw an exception
    Mockito.when(restTemplate.getForObject(Mockito.anyString(), Mockito.eq(String.class)))
           .thenThrow(new RuntimeException("Simulated REST failure"));

    // 3. Run and assert
    CircuitBreakerException exception = assertThrows(
            CircuitBreakerException.class,
            () -> {
                System.out.println("Calling serviceHelper.getProductListFromCache now...");
                serviceHelper.getProductListFromCache(productListCacheModel);
            }
    );

    // 4. Validate
    assertEquals("Main execution failed", exception.getMessage());
    assertEquals("Simulated REST failure", exception.getCause().getMessage());

    // 5. Verify restTemplate was called
    Mockito.verify(restTemplate).getForObject(Mockito.anyString(), Mockito.eq(String.class));
}
