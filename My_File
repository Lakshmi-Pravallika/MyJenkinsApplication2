@Test
void testGetProducts_ProcessSearchFlow_Success() throws Exception {
    // Arrange
    QueryParams qp = new QueryParams();
    qp.setSearchType("CATEGORY"); // not equal to "SUGGESTION" so it will go to ELSE branch

    // Step 1: Mock cache retrieval to return a non-String so that it proceeds further
    when(loyaltyReflecktionsServiceHelper.getProductListFromCache(productListCacheModel))
            .thenReturn(false);

    // Step 2: Mock Bloomreach response to return null
    when(bloomreachService.getBloomreachSearchResults(any(), anyString(), any(), any()))
            .thenReturn(null);

    // Step 3: Mock ReflecktionsUtils static method calls
    try (var mockedStatic = Mockito.mockStatic(ReflecktionsUtils.class)) {
        mockedStatic.when(() -> ReflecktionsUtils.convertURLParamToMap(any(Optional.class), anyString()))
                .thenReturn(Collections.emptyMap());
        mockedStatic.when(() -> ReflecktionsUtils.isAppRedirectLink(anyString()))
                .thenReturn(false);

        // Step 4: Mock RestTemplate.exchange for SearchCategoryResponseData
        ResponseEntity<SearchCategoryResponseData> mockResponseEntity = new ResponseEntity<>(responseData, HttpStatus.OK);
        when(restTemplate.exchange(
                anyString(),
                eq(HttpMethod.POST),
                any(HttpEntity.class),
                eq(SearchCategoryResponseData.class)))
                .thenReturn(mockResponseEntity);

        // Step 5: Mock processSearchForRefk to return final JSON string
        String expectedJson = "{\"status\":\"success\"}";
        Mockito.doReturn(expectedJson)
               .when(loyaltyService)
               .processSearchForRefk(filterMap, productListCacheModel, responseData, null);

        // Act
        ResponseEntity<String> result = loyaltyService.getProducts(
                "dataValue",
                servletRequest,
                filterMap,
                qp,
                Optional.of("store123"),
                productListCacheModel,
                Optional.of("sortValue")
        );

        // Assert
        assertNotNull(result);
        assertEquals(HttpStatus.OK, result.getStatusCode());
        assertEquals(expectedJson, result.getBody());

        // Verify calls
        Mockito.verify(loyaltyReflecktionsServiceHelper, Mockito.times(1))
               .getProductListFromCache(productListCacheModel);

        Mockito.verify(bloomreachService, Mockito.times(1))
               .getBloomreachSearchResults(any(), anyString(), any(), any());

        Mockito.verify(restTemplate, Mockito.times(1))
               .exchange(anyString(), eq(HttpMethod.POST), any(HttpEntity.class), eq(SearchCategoryResponseData.class));

        Mockito.verify(loyaltyService, Mockito.times(1))
               .processSearchForRefk(filterMap, productListCacheModel, responseData, null);
    }
}
