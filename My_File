@Test
void testGetProductListFromCache_WhenRestTemplateFails_ShouldTriggerFallback() {
    // Enable the cache
    ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", true);

    // Set private fields
    ReflectionTestUtils.setField(serviceHelper, "cacheHost", "http://mock-cache-host");
    ReflectionTestUtils.setField(serviceHelper, "environment", "dev");

    // Mock the API key
    Mockito.when(parameterUtil.getEnvironmentParameter("cache_api_key")).thenReturn("dummy-key");

    // Make restTemplate throw
    Mockito.when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
           .thenThrow(new RuntimeException("Simulated failure"));

    // Call method
    Object result = serviceHelper.getProductListFromCache(cacheModel);

    // ✅ Even though CircuitBreakerException is thrown internally,
    //    the outer catch returns false to the caller
    assertEquals(false, result);

    // Verify restTemplate was called
    Mockito.verify(restTemplate, times(1))
           .exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class));
}


@Test
void testCircuitBreakerLambdaThrowsException() throws Throwable {
    // Enable cache
    ReflectionTestUtils.setField(serviceHelper, "isCacheEnabled", true);

    // Force API key
    Mockito.when(parameterUtil.getEnvironmentParameter("cache_api_key")).thenReturn("dummy-key");

    // Force restTemplate to throw
    Mockito.when(restTemplate.exchange(any(URI.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(Object.class)))
           .thenThrow(new RuntimeException("Simulated failure"));

    // Build the supplier manually like inside serviceHelper
    CheckedFunction0<Object> supplier = CircuitBreaker.decorateCheckedSupplier(getCircuitBreaker, () -> {
        throw new CircuitBreakerException("Main execution failed", new RuntimeException("Simulated failure"));
    });

    // ✅ This will now actually throw CircuitBreakerException
    assertThrows(CircuitBreakerException.class, supplier::apply);
}
