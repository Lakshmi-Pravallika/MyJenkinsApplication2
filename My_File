import com.fasterxml.jackson.databind.ObjectMapper;
import com.skechers.loyalty.reflecktions.data.response.*;
import com.skechers.loyalty.reflecktions.model.ProductListCacheModel;
import com.skechers.loyalty.reflecktions.service.LoyaltyReflecktionsServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class LoyaltyReflecktionsServiceImplTest {

    @Mock
    private ObjectMapper mapper;

    @InjectMocks
    private LoyaltyReflecktionsServiceImpl service;

    private ProductListCacheModel cacheModel;
    private Map<String, String> filterMap;
    private SearchCategoryResponseData responseData;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        cacheModel = ProductListCacheModel.builder().build();
        filterMap = new HashMap<>();

        // ----------- Build SearchCategoryResponseData -------------
        responseData = new SearchCategoryResponseData();
        responseData.setTotalItem(2);

        // Mock product values
        ValueItem item1 = new ValueItem();
        item1.setId("p1");

        ValueItem item2 = new ValueItem();
        item2.setId("p2");

        ProductData productData = new ProductData();
        productData.setValue(Arrays.asList(item1, item2));

        ContentData contentData = new ContentData();
        contentData.setProduct(productData);
        responseData.setContent(contentData);

        // ----------- Build Facets -------------
        CategoryProductFacetValue facetValue = new CategoryProductFacetValue();
        facetValue.setLabel("Red");
        facetValue.setValue("red");

        CategoryProductFacetData colorFacet = new CategoryProductFacetData();
        colorFacet.setValue(new ArrayList<>(Collections.singletonList(facetValue)));

        CategoryProductFacetData sizeFacet = new CategoryProductFacetData();
        sizeFacet.setValue(new ArrayList<>());

        Map<String, CategoryProductFacetData> facetMap = new HashMap<>();
        facetMap.put("colors", colorFacet);
        facetMap.put("sizes", sizeFacet);

        responseData.setFacet(facetMap);
    }

    @Test
    void testProcessSearchForRefk_Success() throws IOException {
        // Arrange
        String expectedJson = "{\"status\":\"success\"}";
        when(mapper.writeValueAsString(any(SearchCategoryResponseData.class))).thenReturn(expectedJson);

        // Act
        String result = service.processSearchForRefk(filterMap, cacheModel, responseData, null);

        // Assert
        assertNotNull(result);
        assertEquals(expectedJson, result);

        // Verify JSON serialization was called
        verify(mapper, times(1)).writeValueAsString(any(SearchCategoryResponseData.class));

        // Verify facets are processed
        assertTrue(responseData.getFacet().containsKey("colors"));
        assertTrue(responseData.getFacet().containsKey("sizes"));
    }

    @Test
    void testProcessSearchForRefk_WhenTotalItemZero() throws IOException {
        // Arrange
        responseData.setTotalItem(0);
        String expectedJson = "{\"status\":\"empty\"}";
        when(mapper.writeValueAsString(any(SearchCategoryResponseData.class))).thenReturn(expectedJson);

        // Act
        String result = service.processSearchForRefk(filterMap, cacheModel, responseData, null);

        // Assert
        assertEquals(0, responseData.getTotalPage(), "Total page should be 0 when no items are present");
        assertEquals(expectedJson, result);
    }

    @Test
    void testProcessSearchForRefk_WhenIOExceptionOccurs() throws IOException {
        // Arrange
        when(mapper.writeValueAsString(any(SearchCategoryResponseData.class)))
                .thenThrow(new IOException("Serialization failed"));

        // Act
        String result = service.processSearchForRefk(filterMap, cacheModel, responseData, null);

        // Assert
        assertNull(result, "Result should be null when serialization fails");
    }
}
